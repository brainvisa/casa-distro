#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import glob
import os
import os.path as osp
import signal
import subprocess
import sys


def find_in_path(command):
    path = os.environ.get('PATH', os.defpath)
    if not path:
        return None
    path = path.split(os.pathsep)

    seen = set()
    for dir in path:
        normdir = os.path.normcase(dir)
        if normdir not in seen:
            seen.add(normdir)
            name = os.path.join(dir, command)
            if (osp.exists(name)
                    and os.access(name, os.F_OK | os.X_OK)
                    and not osp.isdir(name)):
                return name
    return None


def failure(message):
    print('ERROR:', message, file=sys.stderr)
    sys.exit(1)


help = False
verbose = None

perform_run = True
casa_distro_admin = False
me = osp.basename(sys.argv[0])
use_bv_options = True
if me != 'bv':
    # we are invoked as another name from 'bv': we are obviously a symlink to
    # the bv script. In that situation we should:
    # - use the name we have been invoked as the command to run in the
    #   container, as if called as "bv otherprogram"
    # - dereference the symlink to get the actual bv script in sys.argv[0]
    #   because we will use its path to find out the environment dir
    # - There is an exception for a symlink called casa_distro. In this case
    #   casa_distro is called directly without using the container.
    if osp.islink(sys.argv[0]):
        if me in ('casa_distro', 'casa_distro_admin'):
            perform_run = False
            casa_distro_admin = (me == 'casa_distro_admin')
            use_bv_options = False
        else:
            sys.argv.insert(1, me)
            bv = os.readlink(sys.argv[0])
            if not osp.isabs(bv):
                bv = osp.join(osp.dirname(sys.argv[0]), bv)
            sys.argv[0] = bv
            sys.argv.insert(1, '--')
i = 1
if use_bv_options:
    while i < len(sys.argv):
        option = sys.argv[i]
        if option in ('-h', '--help'):
            help = True
        elif option in ('-v', '--verbose'):
            verbose = sys.stdout
        else:
            break
        i += 1
command = sys.argv[i:]


if help:
    print('''usage: bv [-h] [-v] [command...]

Command used to start any BrainVISA related program.

It is meant to be used from outside a container, and runs commands inside a
container.

Used without parameter, it starts a graphical interface
allowing the configuration of the environment.

optional arguments:
  -h, --help     show this help message and exit
  -v, --verbose

Currently bv is just a shorthand to the "casa_distro run" command, and follows
the same syntax and options. In the future it will change to more
"conventional" arguments syntax (say, "--opengl container" instead of
"opengl=container").

See the doc in casa_distro:

    casa_distro help run
''')
    sys.exit()


if 'CASA_HOST_DIR' in os.environ:
    print('the "%s" command has been called from within a casa-distro '
          'container. This is not the way it should be used: it must be '
          'called from the host system.' % osp.basename(sys.argv[0]),
          file=sys.stderr)
    sys.exit(1)


bv = osp.normpath(osp.abspath(sys.argv[0]))
real_bv = osp.realpath(bv)
guess_environments = [osp.dirname(osp.dirname(bv))]
guess_environment = osp.dirname(osp.dirname(real_bv))
for i in range(5):
    guess_environments.append(guess_environment)
    parent = osp.dirname(guess_environment)
    if parent == guess_environment:
        break
    guess_environment = parent
for environment_dir in guess_environments:
    if (osp.exists(osp.join(environment_dir, 'host', 'conf',
                            'casa_distro.json'))
        or osp.exists(osp.join(environment_dir, 'conf',
                               'casa_distro.json'))):
        break
else:
    environment_dir = None
    if perform_run:
        if not environment_dir or not os.path.isdir(environment_dir):
            environment_dir = os.environ.get('CASA_ENVIRONMENT_DIR')
            if environment_dir:
                environment_dir = osp.normpath(environment_dir)

        if not environment_dir or not os.path.isdir(environment_dir):
            failure(
                'Cannot find execution environment\n'
                'An appropriate environment has not been found. Please check '
                'that "bv" is run in an environment bin/ directory (and '
                'started from the host system) or that the '
                'CASA_ENVIRONMENT_DIR environment variable has been set '
                'appropriately.')

casa_distro = None
if real_bv.startswith(osp.join(environment_dir, 'src')):
    renv = osp.relpath(osp.dirname(osp.dirname(real_bv)), environment_dir)
    paths = (osp.split(renv), )
else:
    paths = (
        ('src', 'development', 'casa-distro', 'master'),  # master 1st
        ('src', 'development', 'casa-distro', '*'),
        ('src', 'development', 'casa-distro'),
        ('src', 'casa-distro'),
        ('bootstrap', 'casa-distro'),  # for developer installs
        ('casa-distro',),  # for user installs and old developer installs
    )
for i in paths:
    for casa_distro_src in glob.glob(osp.join(environment_dir, *i)):
        if osp.exists(osp.join(casa_distro_src, 'python', 'casa_distro',
                               '__init__.py')):
            casa_distro = osp.join(casa_distro_src, 'bin', 'casa_distro')
            break
    if casa_distro:
        break
else:
    casa_distro = find_in_path('casa_distro')
    if not casa_distro:
        failure('Cannot find casa_distro executable')

if not command and perform_run:
    command = ['casa_container', 'config_gui']

if casa_distro_admin:
    host_command = [sys.executable, casa_distro + '_admin']
else:
    host_command = [sys.executable, casa_distro]

if perform_run:
    if command[0] not in ('bv_maker', ):
        # if the command is a sub-command of casa_distro, call it the
        # casa_distro way because it may handle some options differently (gui
        # and opengl for bv_maker for instance)
        host_command += ['run']
    else:
        host_command += [command[0]]
        command = command[1:]
    host_command += ['base_directory={}'.format(environment_dir)]

host_command += command

if verbose:
    print('Environment directory =', environment_dir, file=verbose)
    print('casa_distro executable =', casa_distro, file=verbose)
    print('Container command =', ' '.join("'{}'".format(i) for i in command))
    print('Host command =', ' '.join("'{}'".format(i) for i in host_command))

# universal_newlines is a weird name for requesting conversion to text
try:
    output = subprocess.check_output([casa_distro, '--version'],
                                     stderr=subprocess.STDOUT,
                                     bufsize=-1,
                                     universal_newlines=True)
except subprocess.CalledProcessError as exc:
    failure('{} failed with the following message:\n{}'
            .format(casa_distro, exc.output))
s = output.split()
if not s:
    version = 'unknown'
else:
    version = s[-1]
if not version.startswith('3.'):
    failure('Invalid version for {}: {}'.format(casa_distro, output))

# Avoid displaying a stack trace if the child command is interrupted with
# Ctrl+C
signal.signal(signal.SIGINT, signal.SIG_DFL)

env = os.environ.copy()
env['CASA_DIR'] = environment_dir
retcode = subprocess.call(host_command, env=env)
sys.exit(retcode)
